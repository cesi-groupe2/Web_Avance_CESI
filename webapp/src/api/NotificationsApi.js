/**
 * Swagger Easeat Notifications microservice
 * This is a microservice for managing notifications
 *
 * The version of the OpenAPI document: 1.0
 * Contact: benjamin.guerre@viacesi.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelUser from '../model/ModelUser';

/**
* Notifications service.
* @module api/NotificationsApi
* @version 1.0
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notificationsClientConnectWsGet operation.
     * @callback module:api/NotificationsApi~notificationsClientConnectWsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle WebSocket connection for client notifications
     * Handle WebSocket connection for client notifications
     * @param {String} id User ID
     * @param {module:api/NotificationsApi~notificationsClientConnectWsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelUser}
     */
    notificationsClientConnectWsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationsClientConnectWsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelUser;
      return this.apiClient.callApi(
        '/notifications/client/connectWs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsClientIdClientNotifyGet operation.
     * @callback module:api/NotificationsApi~notificationsClientIdClientNotifyGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify client
     * Notify client
     * @param {String} idClient Client ID
     * @param {module:api/NotificationsApi~notificationsClientIdClientNotifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    notificationsClientIdClientNotifyGet(idClient, callback) {
      let postBody = null;
      // verify the required parameter 'idClient' is set
      if (idClient === undefined || idClient === null) {
        throw new Error("Missing the required parameter 'idClient' when calling notificationsClientIdClientNotifyGet");
      }

      let pathParams = {
        'idClient': idClient
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/notifications/client/{idClient}/notify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsDeliveryPersonConnectWsGet operation.
     * @callback module:api/NotificationsApi~notificationsDeliveryPersonConnectWsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle WebSocket connection for delivery person notifications
     * Handle WebSocket connection for delivery person notifications
     * @param {String} id User ID
     * @param {module:api/NotificationsApi~notificationsDeliveryPersonConnectWsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelUser}
     */
    notificationsDeliveryPersonConnectWsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationsDeliveryPersonConnectWsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelUser;
      return this.apiClient.callApi(
        '/notifications/deliveryPerson/connectWs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsDeliveryPersonIdDeliveryPersonNotifyGet operation.
     * @callback module:api/NotificationsApi~notificationsDeliveryPersonIdDeliveryPersonNotifyGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify delivery person
     * Notify delivery person
     * @param {String} idDeliveryPerson Delivery Person ID
     * @param {module:api/NotificationsApi~notificationsDeliveryPersonIdDeliveryPersonNotifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    notificationsDeliveryPersonIdDeliveryPersonNotifyGet(idDeliveryPerson, callback) {
      let postBody = null;
      // verify the required parameter 'idDeliveryPerson' is set
      if (idDeliveryPerson === undefined || idDeliveryPerson === null) {
        throw new Error("Missing the required parameter 'idDeliveryPerson' when calling notificationsDeliveryPersonIdDeliveryPersonNotifyGet");
      }

      let pathParams = {
        'idDeliveryPerson': idDeliveryPerson
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/notifications/deliveryPerson/{idDeliveryPerson}/notify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsRestaurantConnectWsGet operation.
     * @callback module:api/NotificationsApi~notificationsRestaurantConnectWsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle WebSocket connection for restaurant notifications
     * Handle WebSocket connection for restaurant notifications
     * @param {String} id User ID
     * @param {module:api/NotificationsApi~notificationsRestaurantConnectWsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelUser}
     */
    notificationsRestaurantConnectWsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationsRestaurantConnectWsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelUser;
      return this.apiClient.callApi(
        '/notifications/restaurant/connectWs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsRestaurantIdRestaurantNotifyPost operation.
     * @callback module:api/NotificationsApi~notificationsRestaurantIdRestaurantNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify restaurant owner
     * Notify restaurant owner
     * @param {String} idRestaurant Restaurant ID
     * @param {module:api/NotificationsApi~notificationsRestaurantIdRestaurantNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    notificationsRestaurantIdRestaurantNotifyPost(idRestaurant, callback) {
      let postBody = null;
      // verify the required parameter 'idRestaurant' is set
      if (idRestaurant === undefined || idRestaurant === null) {
        throw new Error("Missing the required parameter 'idRestaurant' when calling notificationsRestaurantIdRestaurantNotifyPost");
      }

      let pathParams = {
        'idRestaurant': idRestaurant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/notifications/restaurant/{idRestaurant}/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

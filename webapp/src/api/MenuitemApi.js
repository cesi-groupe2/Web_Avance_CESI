/**
 * Swagger Easeat restaurant microservice
 * This is a microservice for managing restaurants
 *
 * The version of the OpenAPI document: 2.0
 * Contact: benjamin.guerre@viacesi.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelMenuitem from '../model/ModelMenuitem';

/**
* Menuitem service.
* @module api/MenuitemApi
* @version 2.0
*/
export default class MenuitemApi {

    /**
    * Constructs a new MenuitemApi. 
    * @alias module:api/MenuitemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the restaurantRestaurantIdMenuitemsMenuItemIdDelete operation.
     * @callback module:api/MenuitemApi~restaurantRestaurantIdMenuitemsMenuItemIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu item
     * Delete menu item by id
     * @param {Number} restaurantId Restaurant id
     * @param {Number} menuItemId Menu item id
     * @param {module:api/MenuitemApi~restaurantRestaurantIdMenuitemsMenuItemIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    restaurantRestaurantIdMenuitemsMenuItemIdDelete(restaurantId, menuItemId, callback) {
      let postBody = null;
      // verify the required parameter 'restaurantId' is set
      if (restaurantId === undefined || restaurantId === null) {
        throw new Error("Missing the required parameter 'restaurantId' when calling restaurantRestaurantIdMenuitemsMenuItemIdDelete");
      }
      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling restaurantRestaurantIdMenuitemsMenuItemIdDelete");
      }

      let pathParams = {
        'restaurantId': restaurantId,
        'menuItemId': menuItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/restaurant/{restaurantId}/menuitems/{menuItemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restaurantRestaurantIdMenuitemsMenuItemIdGet operation.
     * @callback module:api/MenuitemApi~restaurantRestaurantIdMenuitemsMenuItemIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelMenuitem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item by id
     * Get menu item by id
     * @param {Number} restaurantId Restaurant id
     * @param {Number} menuItemId Menu item id
     * @param {module:api/MenuitemApi~restaurantRestaurantIdMenuitemsMenuItemIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelMenuitem}
     */
    restaurantRestaurantIdMenuitemsMenuItemIdGet(restaurantId, menuItemId, callback) {
      let postBody = null;
      // verify the required parameter 'restaurantId' is set
      if (restaurantId === undefined || restaurantId === null) {
        throw new Error("Missing the required parameter 'restaurantId' when calling restaurantRestaurantIdMenuitemsMenuItemIdGet");
      }
      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling restaurantRestaurantIdMenuitemsMenuItemIdGet");
      }

      let pathParams = {
        'restaurantId': restaurantId,
        'menuItemId': menuItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelMenuitem;
      return this.apiClient.callApi(
        '/restaurant/{restaurantId}/menuitems/{menuItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restaurantRestaurantIdMenuitemsMenuItemIdPut operation.
     * @callback module:api/MenuitemApi~restaurantRestaurantIdMenuitemsMenuItemIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelMenuitem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu item
     * Update menu item by id
     * @param {Number} restaurantId Restaurant id
     * @param {Number} menuItemId Menu item id
     * @param {module:model/ModelMenuitem} menuItem Menu item
     * @param {module:api/MenuitemApi~restaurantRestaurantIdMenuitemsMenuItemIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelMenuitem}
     */
    restaurantRestaurantIdMenuitemsMenuItemIdPut(restaurantId, menuItemId, menuItem, callback) {
      let postBody = menuItem;
      // verify the required parameter 'restaurantId' is set
      if (restaurantId === undefined || restaurantId === null) {
        throw new Error("Missing the required parameter 'restaurantId' when calling restaurantRestaurantIdMenuitemsMenuItemIdPut");
      }
      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling restaurantRestaurantIdMenuitemsMenuItemIdPut");
      }
      // verify the required parameter 'menuItem' is set
      if (menuItem === undefined || menuItem === null) {
        throw new Error("Missing the required parameter 'menuItem' when calling restaurantRestaurantIdMenuitemsMenuItemIdPut");
      }

      let pathParams = {
        'restaurantId': restaurantId,
        'menuItemId': menuItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelMenuitem;
      return this.apiClient.callApi(
        '/restaurant/{restaurantId}/menuitems/{menuItemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restaurantRestaurantIdMenuitemsNewPost operation.
     * @callback module:api/MenuitemApi~restaurantRestaurantIdMenuitemsNewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelMenuitem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu items by restaurant id
     * Get menu items by restaurant id
     * @param {Number} restaurantId Restaurant id
     * @param {module:model/ModelMenuitem} menuItem Menu item
     * @param {module:api/MenuitemApi~restaurantRestaurantIdMenuitemsNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelMenuitem}
     */
    restaurantRestaurantIdMenuitemsNewPost(restaurantId, menuItem, callback) {
      let postBody = menuItem;
      // verify the required parameter 'restaurantId' is set
      if (restaurantId === undefined || restaurantId === null) {
        throw new Error("Missing the required parameter 'restaurantId' when calling restaurantRestaurantIdMenuitemsNewPost");
      }
      // verify the required parameter 'menuItem' is set
      if (menuItem === undefined || menuItem === null) {
        throw new Error("Missing the required parameter 'menuItem' when calling restaurantRestaurantIdMenuitemsNewPost");
      }

      let pathParams = {
        'restaurantId': restaurantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelMenuitem;
      return this.apiClient.callApi(
        '/restaurant/{restaurantId}/menuitems/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

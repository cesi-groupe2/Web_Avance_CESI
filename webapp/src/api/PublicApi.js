/**
 * Swagger Easeat Auth API
 * This is a microservice for managing authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: benjamin.guerre@viacesi.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Public service.
* @module api/PublicApi
* @version 1.0
*/
export default class PublicApi {

    /**
    * Constructs a new PublicApi. 
    * @alias module:api/PublicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the publicForgotPasswordPost operation.
     * @callback module:api/PublicApi~publicForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password, send an email to the user
     * Forgot password, send an email to the user
     * @param {String} email Email
     * @param {module:api/PublicApi~publicForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    publicForgotPasswordPost(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling publicForgotPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'email': email
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/public/forgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicLoginPost operation.
     * @callback module:api/PublicApi~publicLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login a user
     * Login a user
     * @param {String} email Email
     * @param {String} password Password
     * @param {module:api/PublicApi~publicLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    publicLoginPost(email, password, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling publicLoginPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling publicLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'email': email,
        'password': password
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/public/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicRegisterPost operation.
     * @callback module:api/PublicApi~publicRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new user
     * Register a new user
     * @param {String} email Email
     * @param {String} password Password
     * @param {String} firstname Firstname
     * @param {String} lastname Lastname
     * @param {String} role Role
     * @param {Object} opts Optional parameters
     * @param {String} [picture] Picture
     * @param {String} [phone] Phone
     * @param {String} [deliveryAdress] Delivery adress
     * @param {String} [facturationAdress] Facturation adress
     * @param {module:api/PublicApi~publicRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    publicRegisterPost(email, password, firstname, lastname, role, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling publicRegisterPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling publicRegisterPost");
      }
      // verify the required parameter 'firstname' is set
      if (firstname === undefined || firstname === null) {
        throw new Error("Missing the required parameter 'firstname' when calling publicRegisterPost");
      }
      // verify the required parameter 'lastname' is set
      if (lastname === undefined || lastname === null) {
        throw new Error("Missing the required parameter 'lastname' when calling publicRegisterPost");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling publicRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'email': email,
        'password': password,
        'picture': opts['picture'],
        'firstname': firstname,
        'lastname': lastname,
        'phone': opts['phone'],
        'deliveryAdress': opts['deliveryAdress'],
        'facturationAdress': opts['facturationAdress'],
        'role': role
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/public/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

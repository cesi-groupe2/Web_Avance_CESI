/**
 * Swagger Easeat Order microservice API
 * This is a microservice for managing orders in the Easeat application.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: benjamin.guerre@viacesi.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MongoModelsOrder from '../model/MongoModelsOrder';

/**
* Order service.
* @module api/OrderApi
* @version 2.0
*/
export default class OrderApi {

    /**
    * Constructs a new OrderApi. 
    * @alias module:api/OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allGet operation.
     * @callback module:api/OrderApi~allGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[MongoModelsOrder]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all orders
     * Get all orders
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit
     * @param {module:api/OrderApi~allGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[MongoModelsOrder]>}
     */
    allGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [[MongoModelsOrder]];
      return this.apiClient.callApi(
        '/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the historyUserIdGet operation.
     * @callback module:api/OrderApi~historyUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[MongoModelsOrder]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order history by user ID
     * Get order history by user ID
     * @param {String} userId User ID
     * @param {module:api/OrderApi~historyUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[MongoModelsOrder]>}
     */
    historyUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling historyUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [[MongoModelsOrder]];
      return this.apiClient.callApi(
        '/history/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nextStatusOrderIdPut operation.
     * @callback module:api/OrderApi~nextStatusOrderIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order to the next status
     * Update an order to the next status
     * @param {String} orderId Order ID
     * @param {module:api/OrderApi~nextStatusOrderIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nextStatusOrderIdPut(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling nextStatusOrderIdPut");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/nextStatus/{orderId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderIdDelete operation.
     * @callback module:api/OrderApi~orderIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order
     * Delete an order
     * @param {String} orderId Order ID
     * @param {module:api/OrderApi~orderIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orderIdDelete(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderIdDelete");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{orderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderIdGet operation.
     * @callback module:api/OrderApi~orderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoModelsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order by id
     * Get order by id
     * @param {String} orderId Order ID
     * @param {module:api/OrderApi~orderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoModelsOrder}
     */
    orderIdGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderIdGet");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoModelsOrder;
      return this.apiClient.callApi(
        '/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rootPatch operation.
     * @callback module:api/OrderApi~rootPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoModelsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order
     * Update an order
     * @param {module:model/MongoModelsOrder} order Order object
     * @param {module:api/OrderApi~rootPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoModelsOrder}
     */
    rootPatch(order, callback) {
      let postBody = order;
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling rootPatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MongoModelsOrder;
      return this.apiClient.callApi(
        '/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rootPost operation.
     * @callback module:api/OrderApi~rootPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoModelsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order
     * Create an order
     * @param {module:model/MongoModelsOrder} order Order object
     * @param {module:api/OrderApi~rootPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoModelsOrder}
     */
    rootPost(order, callback) {
      let postBody = order;
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling rootPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MongoModelsOrder;
      return this.apiClient.callApi(
        '/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

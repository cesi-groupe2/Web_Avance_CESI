/**
 * Swagger Easeat Order position API
 * This is a microservice for managing orders positions
 *
 * The version of the OpenAPI document: 2.0
 * Contact: benjamin.guerre@viacesi.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MongoModelsOrderPositionHistory from '../model/MongoModelsOrderPositionHistory';

/**
* OrderPosition service.
* @module api/OrderPositionApi
* @version 2.0
*/
export default class OrderPositionApi {

    /**
    * Constructs a new OrderPositionApi. 
    * @alias module:api/OrderPositionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLitePost operation.
     * @callback module:api/OrderPositionApi~createLitePostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order position with less order position informations
     * Create an order position with less order position informations, only the order id, and the position are required
     * @param {module:model/MongoModelsOrderPositionHistory} orderPositionHistory Order Position
     * @param {module:api/OrderPositionApi~createLitePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createLitePost(orderPositionHistory, callback) {
      let postBody = orderPositionHistory;
      // verify the required parameter 'orderPositionHistory' is set
      if (orderPositionHistory === undefined || orderPositionHistory === null) {
        throw new Error("Missing the required parameter 'orderPositionHistory' when calling createLitePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/createLite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the journeyOrderIDGet operation.
     * @callback module:api/OrderPositionApi~journeyOrderIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MongoModelsOrderPositionHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the journey of an order by its id
     * Get the journey of an order by its id
     * @param {Number} orderID Order ID
     * @param {module:api/OrderPositionApi~journeyOrderIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MongoModelsOrderPositionHistory>}
     */
    journeyOrderIDGet(orderID, callback) {
      let postBody = null;
      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling journeyOrderIDGet");
      }

      let pathParams = {
        'orderID': orderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MongoModelsOrderPositionHistory];
      return this.apiClient.callApi(
        '/journey/{orderID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lastPositionOrderIDGet operation.
     * @callback module:api/OrderPositionApi~lastPositionOrderIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoModelsOrderPositionHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last position of an order by its id
     * Get the last position of an order by its id
     * @param {Number} orderID Order ID
     * @param {module:api/OrderPositionApi~lastPositionOrderIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoModelsOrderPositionHistory}
     */
    lastPositionOrderIDGet(orderID, callback) {
      let postBody = null;
      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling lastPositionOrderIDGet");
      }

      let pathParams = {
        'orderID': orderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoModelsOrderPositionHistory;
      return this.apiClient.callApi(
        '/lastPosition/{orderID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rootPost operation.
     * @callback module:api/OrderPositionApi~rootPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order position
     * Create an order position
     * @param {module:model/MongoModelsOrderPositionHistory} orderPositionHistory Order Position
     * @param {module:api/OrderPositionApi~rootPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    rootPost(orderPositionHistory, callback) {
      let postBody = orderPositionHistory;
      // verify the required parameter 'orderPositionHistory' is set
      if (orderPositionHistory === undefined || orderPositionHistory === null) {
        throw new Error("Missing the required parameter 'orderPositionHistory' when calling rootPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

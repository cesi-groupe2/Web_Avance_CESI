// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Groupe 2 FISA INFO A4 CESI (2025)",
            "url": "https://contact.easeat.fr",
            "email": "benjamin.guerre@viacesi.fr"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout the user",
                "responses": {
                    "200": {
                        "description": "msg\":\t\"ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/refreshToken": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh the JWT token",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh the JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "msg\":\t\"ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "msg\":\t\"Token is required",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/resetPwd/{userId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset password",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "msg\":\t\"ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "msg\":\t\"Password is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "msg\":\t\"User not found !",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/canAccess/{roleId}": {
            "get": {
                "description": "Check if the user has the right role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "middlewares"
                ],
                "summary": "Check if the user has the right role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role id",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/forgotPassword": {
            "post": {
                "description": "Forgot password, send an email to the user",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Forgot password, send an email to the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "msg\":\t\"ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "msg\":\t\"Email is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "msg\":\t\"User not found !",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/login": {
            "post": {
                "description": "Login a user",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user\":\tmodel.User,\t\"token\":\tstring",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "msg\":\t\"User not found !",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Picture",
                        "name": "picture",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Firstname",
                        "name": "firstname",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lastname",
                        "name": "lastname",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Phone",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Delivery adress",
                        "name": "deliveryAdress",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Facturation adress",
                        "name": "facturationAdress",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Role",
                        "name": "role",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "msg\":\t\"ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "msg\":\t\"Role is required",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Use /login to get your token and use it here",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:7001",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Easeat Auth API",
	Description:      "This is a microservice for managing authentication",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
